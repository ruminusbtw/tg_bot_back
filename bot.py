import os
import django
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from asgiref.sync import sync_to_async

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'telegrambot.settings')
django.setup()

MAIN_MENU_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU_KEYBOARD
    )

@sync_to_async
def get_product_list():
    from tg_bot.models import Product
    products = Product.objects.all()
    if not products:
        return "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    return "\n".join([f"{product.name} - {product.price}" for product in products])

async def list_items(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    product_list = await get_product_list()  
    await update.message.reply_text(product_list)

async def add_item_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–µ–ª–µ—Ñ–æ–Ω, 15000"
    )
    context.user_data['adding_item'] = True

async def add_item_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('adding_item'):
        user_input = update.message.text.strip()

        if ',' not in user_input:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: –¢–µ–ª–µ—Ñ–æ–Ω, 15000"
            )
            return

        try:
            name, price = map(str.strip, user_input.split(",", 1))
            price = float(price)  
            
            from tg_bot.models import Product

            product = Product.objects.create(name=name, price=price)
            await update.message.reply_text(f"–¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ —Ü–µ–Ω–µ {price}!")

            product_list = await get_product_list()
            await update.message.reply_text(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n{product_list}")
        except ValueError:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        finally:
            context.user_data['adding_item'] = False
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ.\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä.\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

app = ApplicationBuilder().token("7836141518:AAF2yIP7K7jCf-dMn_HjrcRyfCwDCSEpe2w").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.Text("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"), list_items))
app.add_handler(MessageHandler(filters.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), add_item_prompt))
app.add_handler(MessageHandler(filters.Text("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), help_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_item_process))

if __name__ == "__main__":
    app.run_polling()
